<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ingestro Importer Case Study Sample</title>
    <script src="https://unpkg.com/@getnuvo/importer-vanilla-js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        h1 {
            color: #333;
        }
        .importer {
            /* Set a height for the importer component to render correctly */
            height: 80vh; 
            width: 100%;
            border: 1px solid #ccc;
            border-radius: 8px;
            overflow: hidden;
        }
        .bug-section {
            background-color: #ffe0b2;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
            border-left: 5px solid #ff9800;
        }
    </style>
</head>
<body>

    <h1>Ingestro Importer Setup - Case Study</h1>
    <p>This is a demonstration of the Importer SDK with the provided configuration.</p>
    
    <div class="bug-section">
        <strong>⚠️ Note on the Bug:</strong> To reproduce the multi-sheet file bug you identified, you would need to add the following code block inside the <code>launchNuvoImporter</code> call (remove it for the working version):
        <pre>
stepHandler: {
    uploadStep: async ({ parsedData, rawData, updateData }) => {
        updateData(parsedData); 
    }
},</pre>
    </div>

    <div class="importer"></div>

    <script type="module">
        // Import the launch function from the vanilla JS module
        import { launchNuvoImporter } from "https://unpkg.com/@getnuvo/importer-vanilla-js@3.3.1/dist/index.esm.js";

        launchNuvoImporter(".importer", {
            licenseKey: "Your License Key", // *** REPLACE WITH YOUR ACTUAL LICENSE KEY ***
            settings: {
                developerMode: true,
                identifier: "product_data",
                // Enables the importer to accept multiple sheets/files
                multipleFileUpload: true, 
                columns: [
                    {
                        label: "Product ID",
                        key: "product_id",
                        required: true,
                    },
                    {
                        label: "Article Name",
                        key: "article_name",
                        required: true,
                    },
                ],
            },
            
            // --- Handlers for Data Manipulation and Lifecycle ---

            // ** (The customer's reported bug code is intentionally omitted here for a working flow) **
            // To reproduce the bug, add the stepHandler here:
            // stepHandler: {
            //   uploadStep: async ({ parsedData, rawData, updateData }) => {
            //     updateData(parsedData);
            //   }
            // },

            // Custom logic applied after mapping but before validation/hooks
            onEntryInit: (row, rowIndex) => {
                // Example: Adds " on init" to the product_id upon initial load
                return { product_id: { value: row.product_id + " on init" } };
            },

            // Custom logic applied on change (e.g., user edits a cell)
            onEntryChange: (rows, logs) => {
                return rows.map((row) => {
                    return {
                        data: {
                            // Example: Adds " on change" to the product_id upon user change
                            product_id: { value: row.data.product_id.value + " on change" },
                        },
                        rowIndex: row.rowIndex,
                    };
                });
            },
            
            // Custom transformation applied to a specific column's values 
            columnHooks: {
                article_name: (values) => {
                    // Example: Prepends "#NU" to every article_name value
                    return values.map(([item, index]) => [{ value: "#NU" + item.value }, index]);
                },
            },

            // Lifecycle Hooks
            onCancel: () => {
                console.log("onCancel triggered: User closed the importer.");
            },
            onResults: (result, errors, complete, logs, block) => {
                console.log("--- onResults Triggered ---");
                console.log("Final Result Data:", result);
                console.log("Error rows:", errors);
                console.log("Logs:", logs);
                
                // You must call complete() when your processing is finished
                complete(); 
                console.log("--- Data import completed successfully ---");
            },
        });
    </script>
</body>
</html>
